//
//  JsonTransactionTest.swift
//  FinanceAppTests
//
//  Created by –ú—É—Å–∞ –ó–∞—Ä–∏—Ñ—è–Ω–æ–≤ on 09.06.2025.
//

import Foundation
import XCTest

@testable import FinanceAppYandex

class JsonTransactionTest: XCTestCase {
    
    var category: FinanceAppYandex.Category!
    
    var bankAccount: BankAccount!
    
    var transaction: Transaction!
    
    override func setUpWithError() throws {
        try super.setUpWithError()
        
        category = Category(
            id: 5,
            name: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
            emoji: "üíµ",
            isIncome: true
        )
        
        bankAccount = BankAccount(
            id: 5,
            userId: 1,
            name: "–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç",
            balance: 100000,
            currency: "$",
            createdAt: nil,
            updatedAt: nil
        )
        
        transaction = Transaction(
            id: 8,
            account: bankAccount,
            category: category,
            amount: 100,
            transactionDate: Date(),
            comment: "–ö–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª —Å–æ—Ç–∫—É",
            createdAt: Date(),
            updatedAt: Date()
        )
    }
    
    override func tearDownWithError() throws {
        category = nil
        bankAccount = nil
        transaction = nil
        
        try super.tearDownWithError()
    }
    
    ///  –ü—Ä–æ–≤–µ—Ä–∫–∞ json -> transaction –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    func testTransactionJsonSerializationAndParsing() throws {
        let json = transaction.jsonObject
        
        guard let parsedTransaction = Transaction.parse(jsonObject: json) else {
            XCTFail("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å transaction –∏–∑ JSON")
            return
        }
        
        XCTAssertEqual(parsedTransaction.id, transaction.id)
        XCTAssertEqual(parsedTransaction.amount, transaction.amount)
        XCTAssertEqual(parsedTransaction.comment, transaction.comment)
        XCTAssertEqual(parsedTransaction.category.id, transaction.category.id)
        XCTAssertEqual(parsedTransaction.category.name, transaction.category.name)
        XCTAssertEqual(parsedTransaction.category.emoji, transaction.category.emoji)
        XCTAssertEqual(parsedTransaction.category.isIncome, transaction.category.isIncome)
        XCTAssertEqual(parsedTransaction.account.id, transaction.account.id)
        XCTAssertEqual(parsedTransaction.account.name, transaction.account.name)
        XCTAssertEqual(parsedTransaction.account.currency, transaction.account.currency)
        XCTAssertEqual(parsedTransaction.account.balance, transaction.account.balance)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ json
    func testInvalidJsonParsingReturnsNil() {
        let invalidJson: Any = ["invalidKey": "value"]
        
        let result = Transaction.parse(jsonObject: invalidJson)
        
        XCTAssertNil(result, "–û–∂–∏–¥–∞–ª–æ—Å—å nil –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞—Ä—Å–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
    }
}
